name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  # Test Dashboard
  test-dashboard:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web-dashboard
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web-dashboard/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || echo "No lint script found"
    
    - name: Build dashboard
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-build
        path: web-dashboard/dist/

  # Package Chrome Extension
  package-extension:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Package Extension
      run: |
        chmod +x scripts/package-extension.sh
        ./scripts/package-extension.sh
    
    - name: Upload Extension
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension
        path: releases/

  # Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: [test-dashboard]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Image
      run: |
        docker build -t allegro-monitor-backend ./backend
    
    - name: Build Dashboard Image
      run: |
        docker build -t allegro-monitor-dashboard ./web-dashboard
    
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  # Deploy to Railway (Production)
  deploy-railway:
    runs-on: ubuntu-latest
    needs: [test-dashboard, package-extension]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy Backend to Railway
      run: |
        echo "ðŸš‚ Railway deployment would happen here"
        # railway deploy --service backend
    
    - name: Deploy Dashboard to Vercel
      run: |
        echo "â–² Vercel deployment would happen here"
        # vercel deploy --prod

  # Create Release
  create-release:
    runs-on: ubuntu-latest
    needs: [test-dashboard, package-extension, build-docker]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Extension Artifacts
      uses: actions/download-artifact@v4
      with:
        name: chrome-extension
        path: ./releases
    
    - name: Download Dashboard Build
      uses: actions/download-artifact@v4
      with:
        name: dashboard-build
        path: ./dashboard-build
    
    - name: Create Release Package
      run: |
        mkdir -p release-package
        
        # Spakuj extension
        cp -r releases/* release-package/
        
        # Spakuj dashboard build
        cd dashboard-build && tar -czf ../release-package/dashboard-build.tar.gz . && cd ..
        
        # UtwÃ³rz instrukcje
        cp README.md release-package/
        cp docs/deployment.md release-package/
        
        # Spakuj wszystko
        cd release-package && zip -r ../allegro-monitor-v${{ github.event.release.tag_name }}.zip . && cd ..
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./allegro-monitor-v${{ github.event.release.tag_name }}.zip
        asset_name: allegro-monitor-v${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 